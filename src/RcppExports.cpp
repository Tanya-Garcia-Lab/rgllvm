// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// sumofrowbycol
arma::mat sumofrowbycol(const arma::mat& x, const arma::vec& beta);
RcppExport SEXP _rgllvm_sumofrowbycol(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sumofrowbycol(x, beta));
    return rcpp_result_gen;
END_RCPP
}
// scoref1c
List scoref1c(const arma::vec& y, const arma::mat& x, const arma::vec& z, const double& mu, const double& sigma, const double& t, const arma::vec& beta, int kbeta);
RcppExport SEXP _rgllvm_scoref1c(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP betaSEXP, SEXP kbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type kbeta(kbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoref1c(y, x, z, mu, sigma, t, beta, kbeta));
    return rcpp_result_gen;
END_RCPP
}
// scoref2c
List scoref2c(const arma::vec& y, const arma::mat& x, const arma::vec& z, const double& mu, const double& sigma, const double& t, const arma::vec& beta, int kbeta);
RcppExport SEXP _rgllvm_scoref2c(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP betaSEXP, SEXP kbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type kbeta(kbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoref2c(y, x, z, mu, sigma, t, beta, kbeta));
    return rcpp_result_gen;
END_RCPP
}
// scoreffinalc
double scoreffinalc(const arma::vec& y, const arma::mat& x, const arma::vec& z, const double& mu, const double& sigma, const arma::vec& t, const arma::vec& w, const arma::vec& beta, int kbeta);
RcppExport SEXP _rgllvm_scoreffinalc(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP kbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type kbeta(kbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(scoreffinalc(y, x, z, mu, sigma, t, w, beta, kbeta));
    return rcpp_result_gen;
END_RCPP
}
// getwic
double getwic(const arma::vec& y, const arma::vec& z);
RcppExport SEXP _rgllvm_getwic(SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(getwic(y, z));
    return rcpp_result_gen;
END_RCPP
}
// getzilrc
List getzilrc(const arma::vec& z);
RcppExport SEXP _rgllvm_getzilrc(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(getzilrc(z));
    return rcpp_result_gen;
END_RCPP
}
// xbetamatrixc
List xbetamatrixc(const arma::mat& x, const arma::vec& beta);
RcppExport SEXP _rgllvm_xbetamatrixc(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(xbetamatrixc(x, beta));
    return rcpp_result_gen;
END_RCPP
}
// exppartin5c
arma::mat exppartin5c(const arma::mat& x, const arma::vec& z, const arma::vec& u, const arma::vec& beta);
RcppExport SEXP _rgllvm_exppartin5c(SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(exppartin5c(x, z, u, beta));
    return rcpp_result_gen;
END_RCPP
}
// yin5c
arma::mat yin5c(const arma::vec& y, const arma::vec& z, const arma::vec& u);
RcppExport SEXP _rgllvm_yin5c(SEXP ySEXP, SEXP zSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(yin5c(y, z, u));
    return rcpp_result_gen;
END_RCPP
}
// formula5denoc
double formula5denoc(const arma::mat& x, const arma::vec& z, const arma::mat& u, const arma::vec& beta);
RcppExport SEXP _rgllvm_formula5denoc(SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(formula5denoc(x, z, u, beta));
    return rcpp_result_gen;
END_RCPP
}
// formula5numerc
double formula5numerc(const arma::vec& y, const arma::mat& x, const arma::vec& z, const arma::mat& u, const double& mu, const double& sigma, const arma::vec& t, const arma::vec& w, const arma::vec& beta, int kbeta);
RcppExport SEXP _rgllvm_formula5numerc(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP kbetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type kbeta(kbetaSEXP);
    rcpp_result_gen = Rcpp::wrap(formula5numerc(y, x, z, u, mu, sigma, t, w, beta, kbeta));
    return rcpp_result_gen;
END_RCPP
}
// formula5forallkc
arma::vec formula5forallkc(const arma::vec& y, const arma::mat& x, const arma::vec& z, const arma::mat& u, const double& mu, const double& sigma, const arma::vec& t, const arma::vec& w, const arma::vec& beta);
RcppExport SEXP _rgllvm_formula5forallkc(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP wSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(formula5forallkc(y, x, z, u, mu, sigma, t, w, beta));
    return rcpp_result_gen;
END_RCPP
}
// efficientscorefc
arma::vec efficientscorefc(const arma::vec& y, const arma::mat& x, const arma::vec& z, const arma::mat& u, const double& mu, const double& sigma, const arma::vec& t, const arma::vec& w, const arma::vec& beta);
RcppExport SEXP _rgllvm_efficientscorefc(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP wSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(efficientscorefc(y, x, z, u, mu, sigma, t, w, beta));
    return rcpp_result_gen;
END_RCPP
}
// esteqc
List esteqc(const arma::mat& y, const List& x, const arma::mat& z, const List& u, const double& mu, const double& sigma, const arma::vec& t, const arma::vec& w, const arma::vec& beta);
RcppExport SEXP _rgllvm_esteqc(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP wSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(esteqc(y, x, z, u, mu, sigma, t, w, beta));
    return rcpp_result_gen;
END_RCPP
}
// esteqfc
arma::vec esteqfc(const arma::mat& y, const List& x, const arma::mat& z, const List& u, const double& mu, const double& sigma, const arma::vec& t, const arma::vec& w, const arma::vec& beta);
RcppExport SEXP _rgllvm_esteqfc(SEXP ySEXP, SEXP xSEXP, SEXP zSEXP, SEXP uSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tSEXP, SEXP wSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const List& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(esteqfc(y, x, z, u, mu, sigma, t, w, beta));
    return rcpp_result_gen;
END_RCPP
}
// PCLijklc
double PCLijklc(const arma::mat& xij, const arma::mat& xkl, const arma::vec& beta, const double& sigmaq, const double& t);
RcppExport SEXP _rgllvm_PCLijklc(SEXP xijSEXP, SEXP xklSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xij(xijSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xkl(xklSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(PCLijklc(xij, xkl, beta, sigmaq, t));
    return rcpp_result_gen;
END_RCPP
}
// PCLijklalltc
double PCLijklalltc(const arma::mat& xij, const arma::mat& xkl, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_PCLijklalltc(SEXP xijSEXP, SEXP xklSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xij(xijSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xkl(xklSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(PCLijklalltc(xij, xkl, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// PCLallc
double PCLallc(const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_PCLallc(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(PCLallc(y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// PCLaikc
double PCLaikc(int i, int k, const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_PCLaikc(SEXP iSEXP, SEXP kSEXP, SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(PCLaikc(i, k, y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// firderPCLaikc
arma::vec firderPCLaikc(int i, int k, const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_firderPCLaikc(SEXP iSEXP, SEXP kSEXP, SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(firderPCLaikc(i, k, y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// secderPCLaikc
arma::mat secderPCLaikc(int i, int k, const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_secderPCLaikc(SEXP iSEXP, SEXP kSEXP, SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(secderPCLaikc(i, k, y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// secderPCLaikallc
arma::mat secderPCLaikallc(const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_secderPCLaikallc(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(secderPCLaikallc(y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// varofsthetac
arma::mat varofsthetac(const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_varofsthetac(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(varofsthetac(y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// PCLsandwich
arma::mat PCLsandwich(const arma::mat& y, const List& x, const arma::vec& beta, const double& sigmaq, const arma::vec& t, const arma::vec& w);
RcppExport SEXP _rgllvm_PCLsandwich(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP, SEXP sigmaqSEXP, SEXP tSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaq(sigmaqSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(PCLsandwich(y, x, beta, sigmaq, t, w));
    return rcpp_result_gen;
END_RCPP
}
// test1
double test1(arma::vec beta);
RcppExport SEXP _rgllvm_test1(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(test1(beta));
    return rcpp_result_gen;
END_RCPP
}
// firdertest1
arma::vec firdertest1(arma::vec beta);
RcppExport SEXP _rgllvm_firdertest1(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(firdertest1(beta));
    return rcpp_result_gen;
END_RCPP
}
// secdertest1
arma::mat secdertest1(arma::vec beta);
RcppExport SEXP _rgllvm_secdertest1(SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(secdertest1(beta));
    return rcpp_result_gen;
END_RCPP
}
// pic
double pic(const arma::vec& xi, const arma::vec& beta);
RcppExport SEXP _rgllvm_pic(SEXP xiSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(pic(xi, beta));
    return rcpp_result_gen;
END_RCPP
}
// esteqbetaic
double esteqbetaic(const int& l, const arma::vec& y, const arma::mat& x, const arma::vec& beta);
RcppExport SEXP _rgllvm_esteqbetaic(SEXP lSEXP, SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(esteqbetaic(l, y, x, beta));
    return rcpp_result_gen;
END_RCPP
}
// esteqallbetaic
arma::vec esteqallbetaic(const arma::vec& y, const arma::mat& x, const arma::vec& beta);
RcppExport SEXP _rgllvm_esteqallbetaic(SEXP ySEXP, SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(esteqallbetaic(y, x, beta));
    return rcpp_result_gen;
END_RCPP
}
// sinforcell
double sinforcell(const int& k, const int& kprime, const arma::mat& x, const arma::vec& beta, const arma::vec& pimat1);
RcppExport SEXP _rgllvm_sinforcell(SEXP kSEXP, SEXP kprimeSEXP, SEXP xSEXP, SEXP betaSEXP, SEXP pimat1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type kprime(kprimeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pimat1(pimat1SEXP);
    rcpp_result_gen = Rcpp::wrap(sinforcell(k, kprime, x, beta, pimat1));
    return rcpp_result_gen;
END_RCPP
}
// sfisherinforinv
arma::mat sfisherinforinv(const arma::mat& x, const arma::vec& beta);
RcppExport SEXP _rgllvm_sfisherinforinv(SEXP xSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(sfisherinforinv(x, beta));
    return rcpp_result_gen;
END_RCPP
}
